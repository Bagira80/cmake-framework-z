##
# @file
# @brief Contains general settings for creating packages from the build-artifacts.
# @note This CMakeLists.txt file must be added as subdirectory at the end of the associated
#       module's CMakeLists.txt file.
#


# ----------------------------------------------------------------------
# General settings for packaging the current project
# ----------------------------------------------------------------------

set( CPACK_PACKAGE_NAME                 "${PROJECT_NAME}" )
set( CPACK_PACKAGE_VENDOR               "${COMPANY_NAME}" )
set( CPACK_PACKAGE_CONTACT              "${COMPANY_SUPPORT_NAME} <${COMPANY_SUPPORT_EMAIL}>" )
set( CPACK_PACKAGE_HOMEPAGE_URL         "${PROJECT_HOMEPAGE_URL}" )
set( CPACK_PACKAGE_DESCRIPTION_SUMMARY  "${PROJECT_DESCRIPTION}" )
set( CPACK_PACKAGE_DESCRIPTION_FILE     "${PROJECT_SOURCE_DIR}/cmake/package-description.txt" )
if (NOT EXISTS "${CPACK_PACKAGE_DESCRIPTION_FILE}")
    unset( CPACK_PACKAGE_DESCRIPTION_FILE )
    set( CPACK_PACKAGE_DESCRIPTION      "" )
else()
    file( READ "${CPACK_PACKAGE_DESCRIPTION_FILE}" CPACK_PACKAGE_DESCRIPTION )
endif()
if (EXISTS ${CMAKE_CURRENT_LIST_DIR}/Welcome.txt)
    set( CPACK_RESOURCE_FILE_WELCOME    "${CMAKE_CURRENT_LIST_DIR}/Welcome.txt" )
endif()
if (EXISTS ${CMAKE_CURRENT_LIST_DIR}/License.txt)
    set( CPACK_RESOURCE_FILE_LICENSE    "${CMAKE_CURRENT_LIST_DIR}/License.txt" )
endif()
if (EXISTS ${CMAKE_CURRENT_LIST_DIR}/Readme.txt)
    set( CPACK_RESOURCE_FILE_README     "${CMAKE_CURRENT_LIST_DIR}/Readme.txt" )
endif()
set( CPACK_PACKAGE_VERSION_MAJOR        "${PROJECT_VERSION_MAJOR}" )
set( CPACK_PACKAGE_VERSION_MINOR        "${PROJECT_VERSION_MINOR}" )
set( CPACK_PACKAGE_VERSION_PATCH        "${PROJECT_VERSION_PATCH}" )
set( CPACK_PACKAGE_VERSION              "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}" )
set( CPACK_VERBATIM_VARIABLES           YES )  # Mandatory!
#set( CPACK_INSTALL_CMAKE_PROJECTS       "${PROJECT_BINARY_DIR};${PROJECT_NAME};ALL;/")
set( CPACK_COMPONENTS_GROUPING          ONE_PER_GROUP )  # Possibly, this should just be set to "IGNORED"!?
set( CPACK_PACKAGE_DIRECTORY            "${CMAKE_BINARY_DIR}/packages" )  # Subdirectory "packages" in top-most build-directory.
set( CPACK_OUTPUT_CONFIG_FILE           "CPackConfig.${project_output_fullname}.cmake" )
if (UNIX)
    set( CPACK_PACKAGING_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}" )
endif()


# ----------------------------------------------------------------------
# Custom settings (not directly used by CPack)
# ----------------------------------------------------------------------

set( CPACK_ENABLE_SEPARATE_DEBUGSYMBOLS "${ENABLE_SEPARATE_DEBUGSYMBOLS}" )
set( CPACK_PACKAGE_BUILD_NUM            "${${PROJECT_NAME}_VERSION_BUILD_NUM}" )
if (DEFINED CURRENT_COMPILER_TAG)
    set( CPACK_COMPILER_TAG             "${CURRENT_COMPILER_TAG}" )
endif()


# ----------------------------------------------------------------------
# Some default settings for using specific generators
# ----------------------------------------------------------------------

# General entry-script for each generator-type, which delegates to the generator-specific script.
set( CPACK_PROJECT_CONFIG_FILE "${CMAKE_CURRENT_BINARY_DIR}/CPackProjectConfig.cmake" )
configure_file( "${LUCHS_TEMPLATES_DIR}/CPackProjectConfig.cmake.in"
                "${CPACK_PROJECT_CONFIG_FILE}"
                @ONLY )

# Generator-specific script for simple Archive-generators.
configure_file( "${LUCHS_TEMPLATES_DIR}/CPackProjectConfig.Archive.cmake.in"
                "${CMAKE_CURRENT_BINARY_DIR}/CPackProjectConfig.Archive.cmake"
                @ONLY )

# DEB-generator specific settings.
if (CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
    # Generator-specific script for DEB-generator.
    configure_file( "${LUCHS_TEMPLATES_DIR}/CPackProjectConfig.DEB.cmake.in"
                    "${CMAKE_CURRENT_BINARY_DIR}/CPackProjectConfig.DEB.cmake"
                    @ONLY )
endif()


# ----------------------------------------------------------------------
# Component- and group-specific settings for CPack
# ----------------------------------------------------------------------

# Load CPack
# Note: This populates variable `CPACK_COMPONENTS_ALL`, too.
include( CPack )


# Reset temporary helper variables.
set( DEPENDENCY_ON_RUNTIME "" )
set( DEPENDENCY_ON_DEVELOPMENT "" )


# The Runtime component.
if (${project_component_prefix_fullname}-Runtime IN_LIST CPACK_COMPONENTS_ALL)
    set( DEPENDENCY_ON_RUNTIME "${project_component_prefix_fullname}-Runtime" )
    cpack_add_component( ${project_component_prefix_fullname}-Runtime
        DISPLAY_NAME   "Runtime"
        DESCRIPTION    "${CPACK_PACKAGE_DESCRIPTION}\nThis package contains the runtime files (shared libraries and executables)."
        INSTALL_TYPES  Full Developer Minimal
        GROUP          "Runtime"
        REQUIRED
    )
endif()
# The Development component.
if (${project_component_prefix_fullname}-Development IN_LIST CPACK_COMPONENTS_ALL)
    set( DEPENDENCY_ON_DEVELOPMENT "${project_component_prefix_fullname}-Development" )
    cpack_add_component( ${project_component_prefix_fullname}-Development
        DISPLAY_NAME   "Developer pre-requisites"
        DESCRIPTION    "${CPACK_PACKAGE_DESCRIPTION}\nThis package contains the development files (headers and static libraries)."
        INSTALL_TYPES  Full Developer
        DEPENDS        "${DEPENDENCY_ON_RUNTIME}"
        GROUP          "Development"
    )
    if (DEPENDENCY_ON_RUNTIME STREQUAL "")
        set( DEPENDENCY_ON_RUNTIME ${DEPENDENCY_ON_DEVELOPMENT} )
    endif()
endif()
# The (optional) DebugSymbols component.
cpack_add_component( ${project_component_prefix_fullname}-DebugSymbols
    DISPLAY_NAME   "Debug-symbols for runtime"
    DESCRIPTION    "${CPACK_PACKAGE_DESCRIPTION}\nThis package contains the debug-symbols needed for debugging."
    INSTALL_TYPES  Full Developer
    DEPENDS        "${DEPENDENCY_ON_RUNTIME}"
    GROUP          "DebugSymbols"
)
# The Plugins component.
cpack_add_component( ${project_component_prefix_fullname}-Plugins
    DISPLAY_NAME   "Plugins"
    DESCRIPTION    "${CPACK_PACKAGE_DESCRIPTION}\nThis package contains plugins."
    INSTALL_TYPES  Full Developer
    DEPENDS        "${DEPENDENCY_ON_RUNTIME}"
    GROUP          "Plugins"
)
# The (optional) Documentation component.
if (${project_component_prefix_fullname}-Documentation IN_LIST CPACK_COMPONENTS_ALL)
    cpack_add_component( ${project_component_prefix_fullname}-Documentation
        DISPLAY_NAME   "API documentation"
        DESCRIPTION    "${CPACK_PACKAGE_DESCRIPTION}\nThis package contains the API documentation."
        INSTALL_TYPES  Full Developer
        DEPENDS        "${DEPENDENCY_ON_DEVELOPMENT}"
        GROUP          "Documentation"
        DISABLED
    )
endif()

# The Runtime component-group.
cpack_add_component_group( Runtime
    DISPLAY_NAME   "Runtime"
    DESCRIPTION    "Runtime binaries"
)
# The DebugSymbols component-group.
cpack_add_component_group( DebugSymbols
    DISPLAY_NAME   "Debug-symbols"
    DESCRIPTION    "Debug-symbols for runtime binaries"
)
# The Development component-group.
cpack_add_component_group( Development
    DISPLAY_NAME   "Development"
    DESCRIPTION    "Development files (headers and static libaries)"
)
# The Plugins component-group.
cpack_add_component_group( Plugins
    DISPLAY_NAME   "Plugins"
    DESCRIPTION    "Plugins"
)
# The Documentation component-group.
cpack_add_component_group( Documentation
    DISPLAY_NAME   "Documentation"
    DESCRIPTION    "Code samples and API documentation"
    PARENT_GROUP   "Development"
)

# The install types:
cpack_add_install_type( Full )
cpack_add_install_type( Minimal )
cpack_add_install_type( Developer DISPLAY_NAME "SDK Development" )


# Clean up temporary helper variables.
unset( DEPENDENCY_ON_RUNTIME )
unset( DEPENDENCY_ON_DEVELOPMENT )
