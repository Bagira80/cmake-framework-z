# Include package configuration files for individual components.
include( ${CMAKE_CURRENT_LIST_DIR}/@project_output_fullname@-Runtime.cmake )
include( ${CMAKE_CURRENT_LIST_DIR}/@project_output_fullname@-Development.cmake OPTIONAL )

# Always make newly imported targets globally visible!
foreach( imported_target IN ITEMS @EXPORTED_TARGETS@ )
    if (NOT TARGET ${imported_target})
        continue()
    endif()
    get_target_property( is_imported ${imported_target} IMPORTED )
    if (NOT is_imported)
        message( WARNING "${imported_target} is expected to be an IMPORTED target, but somehow is a normal target!?" )
        continue()
    endif()
    set_target_properties( ${imported_target} PROPERTIES IMPORTED_GLOBAL TRUE )
endforeach()

# Determine if the newly imported targets have dependencies
# which are common and can automatically be found, too.
include( load-common-dependencies OPTIONAL RESULT_VARIABLE PATH_TO_load-common-dependencies )
if (PATH_TO_load-common-dependencies)
    foreach( imported_target IN ITEMS @EXPORTED_TARGETS@ )
        if (NOT TARGET ${imported_target})
            continue()
        endif()
        # Check list of dependencies for common dependencies.
        get_target_property( dependencies_list ${imported_target} INTERFACE_LINK_LIBRARIES )
        if (dependencies_list)
            foreach( dependency IN LISTS dependencies_list )
                # Skip already known targets.
                if (TARGET ${dependency})
                    continue()
                endif()
                # Skip ORGANIZATION dependencies.
                if (dependency MATCHES "^Organization::.+")
                    message( DEBUG "Skip searching for following indirect dependency of package `${CMAKE_FIND_PACKAGE_NAME}`: ${dependency}" )
                    continue()
                endif()
                # Skip dependencies which do not have a namespace format.
                if (NOT (dependency MATCHES "^.+::.+$"))
                    message( DEBUG "Skip searching for following indirect dependency of package `${CMAKE_FIND_PACKAGE_NAME}`: ${dependency}" )
                    continue()
                endif()
                # Retrieve base name of dependency and try to load it.
                string( REGEX MATCH "^[^:]+" dependency_basename ${dependency} )
                message( DEBUG "Searching for indirect dependency of package `${CMAKE_FIND_PACKAGE_NAME}`: ${dependency}" )
                load_common_dependency( ${dependency_basename} GLOBAL )
            endforeach()
        endif()
    endforeach()
elseif (NOT ${CMAKE_FIND_PACKAGE_NAME}_FIND_QUIETLY)
    message( WARNING "Unable to look for common dependencies of package `${CMAKE_FIND_PACKAGE_NAME}` because the helper script `load-common-dependencies` cannot be found." )
endif()
